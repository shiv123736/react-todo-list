{"version":3,"sources":["componenet/List.jsx","componenet/textbox.jsx","App.js","index.js"],"names":["List","props","context","useContext","userContext","list","dispatch","method","handleDelete","e","console","log","target","strId","getAttribute","intId","parseInt","type","id","handleEdit","index","findIndex","item","data","handleRead","read","className","length","map","onClick","TextBox","useState","text","setText","setId","button","setButton","onChange","value","placeholder","txt","Id","React","createContext","todoList","count","reducer","state","action","newList","removedItem","splice","newList2","index2","newList3","index3","App","useReducer","todo","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19aa9dd0.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport { userContext } from \"../App\";\r\nimport \"../style/List.css\";\r\n\r\nconst List = (props) => {\r\n  const context = useContext(userContext);\r\n  const List = context.list;\r\n  const dispatch = context.method;\r\n\r\n  // console.log(List);\r\n\r\n  const handleDelete = (e) => {\r\n    console.log(e.target);\r\n    let strId = e.target.getAttribute(\"id\");\r\n    let intId = parseInt(strId);\r\n    // console.log(intId);\r\n\r\n    dispatch({\r\n      type: \"delete\",\r\n      id: intId,\r\n    });\r\n  };\r\n  const handleEdit = (e) => {\r\n    let strId = e.target.getAttribute(\"id\");\r\n    let intId = parseInt(strId);\r\n    let index = List.findIndex((item) => item.id == intId);\r\n    props.method(List[index].data, intId);\r\n  };\r\n\r\n  const handleRead = (e) => {\r\n    let strId = e.target.getAttribute(\"id\");\r\n    let intId = parseInt(strId);\r\n    dispatch({\r\n      type: \"read\",\r\n      read: true,\r\n      id: intId,\r\n    });\r\n  };\r\n\r\n  const handleUnRead = (e) => {\r\n    let strId = e.target.getAttribute(\"id\");\r\n    let intId = parseInt(strId);\r\n    dispatch({\r\n      type: \"read\",\r\n      read: false,\r\n      id: intId,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"list-box\">\r\n      {List.length === 0 ? (\r\n        <div>\r\n          <h3 className=\"list-empty\">Your To Do List is Empty</h3>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {List.map((item) => {\r\n            return (\r\n              <div className=\"list-item\">\r\n                <p className={item.read ? \"data\" : \"\"}>{item.data}</p>\r\n\r\n                {/* {item.data} */}\r\n                <div className=\"list-item-btns\">\r\n                  {/* {(item.read) ? \"\" : <button id={item.id} className=\"list-item-read-btn\" onClick={handleRead}>Read</button>} */}\r\n                  <button\r\n                    id={item.id}\r\n                    className={\r\n                      item.read\r\n                        ? \"list-item-read-btn hide\"\r\n                        : \"list-item-read-btn\"\r\n                    }\r\n                    onClick={handleRead}\r\n                  >\r\n                    Read\r\n                  </button>\r\n                  <button\r\n                    id={item.id}\r\n                    className={\r\n                      item.read\r\n                        ? \"list-item-edit-btn hide\"\r\n                        : \"list-item-edit-btn\"\r\n                    }\r\n                    onClick={handleEdit}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    id={item.id}\r\n                    className={\r\n                      item.read\r\n                        ? \"list-item-delete-btn\"\r\n                        : \"list-item-delete-btn hide\"\r\n                    }\r\n                    onClick={handleDelete}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { userContext } from \"../App\";\r\nimport List from \"./List\";\r\nimport \"../style/TextBox.css\";\r\n\r\nconst TextBox = (props) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [id, setId] = useState(0);\r\n  const [button, setButton] = useState(false);\r\n\r\n  const context = useContext(userContext);\r\n  const dispatch = context.method;\r\n  console.log(dispatch);\r\n\r\n  const handleEditText = (txt, Id) => {\r\n    console.log(\"method invoked\" + txt);\r\n    setText(txt);\r\n    setId(Id);\r\n    setButton(true);\r\n    console.log(id);\r\n  };\r\n\r\n  const saveMethod = () => {\r\n    dispatch({\r\n      type: \"save\",\r\n      item: text,\r\n      id: id,\r\n      read: false,\r\n    });\r\n    setText(\"\");\r\n    setButton(false);\r\n  };\r\n\r\n  const addMethod = () => {\r\n    // console.log(text);\r\n    dispatch({\r\n      type: \"add\",\r\n      item: text,\r\n      read: false,\r\n    });\r\n    setText(\"\");\r\n  };\r\n\r\n  const handleText = (e) => {\r\n    // console.log(e.target.value);\r\n    setText(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>To Do</h2>\r\n      <div className=\"text\">\r\n        <input\r\n          className=\"text-box\"\r\n          type=\"text\"\r\n          onChange={handleText}\r\n          value={text}\r\n          placeholder=\"Enter Text Here...\"\r\n        ></input>\r\n        {button ? (\r\n          <button className=\"add-btn\" onClick={saveMethod}>\r\n            Save\r\n          </button>\r\n        ) : (\r\n          <button className=\"add-btn\" onClick={addMethod}>\r\n            Add\r\n          </button>\r\n        )}\r\n        {/* <button className=\"add-btn\" onClick={addMethod}>\r\n          Add\r\n        </button> */}\r\n      </div>\r\n      <List method={handleEditText} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextBox;\r\n","import React, { useReducer } from 'react';\nimport './App.css';\nimport List from './componenet/List';\nimport TextBox from \"./componenet/textbox\";\n\nexport const userContext = React.createContext();\nexport const todoList = {\n  List: [],\n  count: 0,\n}\n\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n      case \"add\":\n        return { ...state, List: [...state.List, { id: state.count + 1, data: action.item, read: action.read}], count: state.count + 1 };\n\n      case \"delete\":\n        let newList = [...state.List];\n        let removedItem = action.id;\n        console.log(\"index =\" +removedItem);\n        let index = newList.findIndex((item) => item.id == removedItem);\n        console.log(\"got index in list = \" +index);\n        newList.splice(index, 1);\n        return { ...state, List: newList};\n\n        case \"save\":\n          let newList2 = [...state.List];\n          let index2 = newList2.findIndex((item) => item.id == action.id);\n          newList2[index2].data = action.item;\n          return { ...state, List: newList2};\n\n        case \"read\":\n          let newList3 = [...state.List];\n          let index3 = newList3.findIndex((item) => item.id == action.id);\n          newList3[index3].read= action.read; \n          return { ...state, List: newList3};\n          \n\n  }\n}\n\nfunction App() {\n  const [todo, dispatch] = useReducer(reducer, todoList)\n  const { List, count } = todo;\n  console.log(List);\n  return (\n    <div className=\"App\">\n      <userContext.Provider value={{ list: List, method: dispatch}}>\n      <div className=\"todo-box\">\n      <TextBox />\n      {/* <List /> */}\n      </div>\n      </userContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}